initSidebarItems({"fn":[["add","Performs elementwise addition of two `Vec<f64>`s. Can be used to combine filters together (eg. combining a low-pass filter with a high-pass filter to create a band-pass filter)"],["bandpass_filter","Creates a low-pass filter. Frequencies between `low_frequency` and `high_frequency` are preserved when samples are convolved with this filter."],["bandreject_filter","Creates a low-pass filter. Frequencies outside of `low_frequency` and `high_frequency` are preserved when samples are convolved with this filter."],["blackman_window","Creates a Blackman window filter of a given size."],["convolve",""],["cutoff_from_frequency","Returns the cutoff fraction for a given cutoff frequency at a sample rate, which can be used for filter creation."],["envelope","Simple linear attack/decay envelope. No sustain or release."],["highpass_filter","Creates a high-pass filter. Frequencies above the cutoff are preserved when samples are convolved with this filter."],["lowpass_filter","Creates a low-pass filter. Frequencies below the cutoff are preserved when samples are convolved with this filter."],["spectral_invert","Given a filter, inverts it. For example, inverting a low-pass filter will result in a high-pass filter with the same cutoff frequency."]],"struct":[["AllPass","A stateful all-pass filter."],["Comb","A stateful comb filter."],["DelayLine","A stateful delay line. Samples are delayed for `delay_length` seconds."]]});