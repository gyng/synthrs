var searchIndex = JSON.parse('{\
"synthrs":{"doc":"","t":[0,0,0,0,0,0,0,0,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,5,5,5,5,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,12,12,12,12,5,12,12,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,4,13,13,13,4,13,3,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,12,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,5,5,5,5,5,3,11,11,11,5,11,11,5,5,5,11,11,5,5,5,11,11,11,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,12,11,11,12,12,12,11,11,11,12,11,11,12,12,5,5,12,12,12,12,12,11,11,11,11,11,5,5,5,5],"n":["errors","filter","midi","music","sample","synthesizer","wave","writer","Io","Parse","Result","SynthrsError","borrow","borrow_mut","cause","fmt","fmt","from","from","into","to_string","try_from","try_into","type_id","vzip","AllPass","Comb","DelayLine","add","bandpass_filter","bandreject_filter","blackman_window","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone_into","clone_into","clone_into","convolve","cutoff_from_frequency","dampening","dampening_inverse","delay_length","delay_samples","envelope","feedback","feedback","fmt","fmt","fmt","from","from","from","highpass_filter","into","into","into","lowpass_filter","new","new","new","read","sample_rate","spectral_invert","tick","tick","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","ActiveSensing","ChannelPressure","Continue","ControlChange","CopyrightNotice","CuePoint","EndOfSystemExclusive","EndOfTrack","EventType","InstrumentName","LyricText","MarkerText","MetaEventType","MidiChannelPrefixAssignment","MidiEvent","MidiSong","MidiTrack","NoteOff","NoteOn","PitchBendChange","PolyponicKeyPressure","ProgramChange","SequenceNumber","SequenceOrTrackName","SequencerSpecificEvent","SmpteOffset","SongPositionPointer","SongSelect","Start","Stop","System","SystemEventType","SystemExclusive","SystemResetOrMeta","TempoSetting","TextEvent","TimeCodeQuaterFrame","TimeSignature","TimingClock","TuneRequest","Unknown","Unknown","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpm","channel","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","event_type","events","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","is_note_terminating","max_time","max_time","meta_event_type","read_midi","read_midi_file","system_event_type","time","time_unit","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","track_count","tracks","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value1","value2","vzip","vzip","vzip","vzip","vzip","vzip","note","note_midi","samples_from_wave","samples_from_wave_bytes","samples_from_wave_file","SamplesIter","borrow","borrow_mut","from","generate","into","into_iter","make_samples","make_samples_from_midi","make_samples_from_midi_file","new","next","peak_normalize","quantize","quantize_samples","try_from","try_into","type_id","unquantize","unquantize_samples","vzip","bell","delay_line_generator","karplus_strong","noise","organ","rising_linear","sampler","sawtooth_wave","sine_wave","square_wave","tangent_wave","triangle_wave","Wave","audio_format","bits_per_sample","block_align","borrow","borrow_mut","byte_rate","chunk_id","chunk_size","clone","clone_into","fmt","format","from","into","num_channels","pcm","read_wav","read_wav_file","sample_rate","subchunk_1_id","subchunk_1_size","subchunk_2_id","subchunk_2_size","to_owned","try_from","try_into","type_id","vzip","write_pcm","write_pcm_file","write_wav","write_wav_file"],"q":["synthrs","","","","","","","","synthrs::errors","","","","","","","","","","","","","","","","","synthrs::filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synthrs::midi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synthrs::music","","synthrs::sample","","","synthrs::synthesizer","","","","","","","","","","","","","","","","","","","","","synthrs::wave","","","","","","","","","","","","synthrs::writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error types and trait implementation","A collection of signal filters.","MIDI parsing routines","Functions for calculating frequencies based off notes and …","Functions for dealing with creating samples for …","Generate audio samples from code.","A collection of waveform generating functions.","Writes audio samples to files. (Reads too, this module …","IO error (file could not read)","File/format parse error","Re-exported <code>Result</code> for synthrs errors","Represents a parsing error.","","","","","","","","","","","","","","A stateful all-pass filter.","A stateful comb filter.","A stateful delay line. Samples are delayed for …","Performs elementwise addition of two <code>Vec<f64></code>s. Can be …","Creates a low-pass filter. Frequencies between …","Creates a low-pass filter. Frequencies outside of …","Creates a Blackman window filter of a given size.","","","","","","","","","","","","","","","Returns the cutoff fraction for a given cutoff frequency …","0.5 works","0.5 works","","","Simple linear attack/decay envelope. No sustain or …","Feedback multiplier (0.5 works)","0.5 works","","","","","","","Creates a high-pass filter. Frequencies above the cutoff …","","","","Creates a low-pass filter. Frequencies below the cutoff …","Creates a new delay line. Samples are delayed for …","Creates a new all-pass filter. Samples are delayed for …","Creates a new comb filter. Samples are delayed for …","","","Given a filter, inverts it. For example, inverting a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a Read + Seek into a <code>Result<MidiSong></code>.","Convenience method for parsing a <code>Result<MidiSong></code> from a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the frequency (equal-tempered) given A4, the …","Calculates the frequency (equal-tempered) given A4 and …","Given a <code>crate::writer::Wave</code>, extract a <code>Vec<f64></code> of …","Given a bunch of bytes for a wave file, extract a <code>Vec<f64></code>…","Given a path to a wave file, extract a <code>Vec<f64></code> of …","An iterator that generates samples of a waveform at a …","","","","Invokes the waveform function <code>f</code> at time <code>t</code> to return the …","","","Given a generator waveform, returns a <code>Vec<f64></code> of raw …","Generates samples from a MIDI file. Supports only one …","Generates samples from a MIDI file","Returns an iterator that generates samples for the …","","Peak normalizes a <code>Vec<f64></code> of samples such that the …","Quantizes a <code>f64</code> sample into <code>T</code>. Convert from [-1.0f64, 1.0]…","Quantizes a <code>Vec<f64></code> of samples into <code>Vec<T></code>.","","","","Reverses a quantization from <code>T</code> into <code>f64</code>. Convert from <code>T</code> …","Reverses quantization of <code>Vec<T></code> into a <code>Vec<f64></code>.","","","Wraps a generator function, delaying its output by …","Bastardised and butchered generic Karplus-Strong …","","","<code>rising_linear</code> is a stateful generator function. Starting …","<code>sampler</code> creates a a generator function given a bunch of …","","","","","","Representation of a WAV file. Does not contain fields for …","1 = PCM","","","","","","","","","","","","","","","","Reads a wave file. Only supports mono 16-bit, …","Reads a wave file given a file path. Convenience wrapper …","","","","","","","","","","","Writes a bunch of <code>&[i16]</code> samples to a <code>Write</code> as raw PCM. …","Creates a file at <code>filename</code> and writes a bunch of <code>&[i16]</code> …","Writes a bunch of <code>&[i16]</code> samples to a <code>Write</code>. Also see …","Creates a file at <code>filename</code> and writes a bunch of <code>&[i16]</code> …"],"i":[0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,2,3,4,2,3,4,2,2,3,4,2,3,4,0,0,4,4,2,2,0,3,4,2,3,4,2,3,4,0,2,3,4,0,2,3,4,2,2,0,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,5,6,5,6,7,7,5,7,0,7,7,7,0,7,0,0,0,6,6,6,6,6,7,7,7,7,5,5,5,5,6,0,5,5,7,7,5,7,5,5,6,5,6,5,7,8,9,10,6,5,7,8,9,10,8,10,6,5,7,8,9,10,6,5,7,8,9,10,6,5,7,10,9,6,5,7,8,9,10,6,5,7,8,9,10,6,5,7,8,9,10,8,9,10,8,9,10,0,0,10,10,8,6,5,7,8,9,10,8,8,6,5,7,8,9,10,6,5,7,8,9,10,6,5,7,8,9,10,10,10,6,5,7,8,9,10,0,0,0,0,0,0,11,11,11,0,11,11,0,0,0,11,11,0,0,0,11,11,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,12,12,12,12,12,12,12,12,12,12,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["error",8],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[],[["vec",3],["f64",15]]],[[["f64",15]],[["vec",3],["f64",15]]],[[["f64",15]],[["vec",3],["f64",15]]],[[["usize",15]],[["vec",3],["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["delayline",3]],[[],["allpass",3]],[[],["comb",3]],[[]],[[]],[[]],[[],[["vec",3],["f64",15]]],[[["f64",15],["usize",15]],["f64",15]],null,null,null,null,[[["f64",15]],["f64",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["f64",15]],[["vec",3],["f64",15]]],[[]],[[]],[[]],[[["f64",15]],[["vec",3],["f64",15]]],[[["f64",15],["usize",15]],["delayline",3]],[[["f64",15],["usize",15]],["allpass",3]],[[["f64",15],["usize",15]],["comb",3]],[[],["f64",15]],null,[[],[["vec",3],["f64",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["f64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["eventtype",4]],[[],["systemeventtype",4]],[[],["metaeventtype",4]],[[],["midisong",3]],[[],["miditrack",3]],[[],["midievent",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eventtype",4]],["bool",15]],[[["systemeventtype",4]],["bool",15]],[[["metaeventtype",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["intoiter",3],["miditrack",3]]],[[],[["intoiter",3],["midievent",3]]],[[],["bool",15]],null,null,null,[[],[["midisong",3],["result",6]]],[[["path",3],["asref",8]],[["midisong",3],["result",6]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["usize",15]],["f64",15]],[[["f64",15],["usize",15]],["f64",15]],[[["wave",3]]],[[["u8",15],["vec",3]],["result",6]],[[["str",15]],["result",6]],null,[[]],[[]],[[]],[[["f64",15]],["f64",15]],[[]],[[]],[[["f64",15],["usize",15]],[["vec",3],["f64",15]]],[[["usize",15],["bool",15],["midisong",3]],[["result",4],["vec",3],["synthrserror",4]]],[[["usize",15],["bool",15],["str",15]],[["result",4],["vec",3],["synthrserror",4]]],[[["fn",8],["u64",15],["box",3]],["samplesiter",3]],[[],[["f64",15],["option",4]]],[[],[["vec",3],["f64",15]]],[[["f64",15]]],[[],["vec",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["f64",15]],[[],[["vec",3],["f64",15]]],[[]],[[["f64",15]]],[[["fn",8],["f64",15],["usize",15]]],[[["fn",8],["f64",15]]],[[]],[[["f64",15]]],[[["f64",15]]],[[["f64",15],["usize",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],null,null,null,null,[[]],[[]],null,null,null,[[],["wave",3]],[[]],[[["formatter",3]],["result",6]],null,[[]],[[]],null,null,[[],[["wave",3],["result",6]]],[[["str",15]],[["wave",3],["result",6]]],null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["result",6]],[[["str",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15],["str",15]],["result",6]]],"p":[[4,"SynthrsError"],[3,"DelayLine"],[3,"AllPass"],[3,"Comb"],[4,"SystemEventType"],[4,"EventType"],[4,"MetaEventType"],[3,"MidiSong"],[3,"MidiTrack"],[3,"MidiEvent"],[3,"SamplesIter"],[3,"Wave"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};